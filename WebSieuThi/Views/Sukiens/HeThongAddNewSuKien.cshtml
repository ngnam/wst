@model WebSieuThi.Models.SuKienChungModel
@{
    ViewBag.Title = "Thêm mới sự kiện";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@section styles {

<link href="~/Scripts/dropzone/dropzone.min.css" rel="stylesheet" />

}

<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<div class="row">
    <div class="col-lg-12">
        <div class="page-header">
            <h3><i class="fa fa-bell-o fa-2x fa-color-red"></i> @ViewBag.Title</h3>
        </div>

        @if (TempData["Updated"] != null)
        {
            <div class="alert alert-success alert-dismissible fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                @Html.Raw(TempData["Updated"])
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                @Html.Raw(TempData["Error"])
            </div>
        }
    </div>

    <!-- /.col-lg-12 -->
</div>


<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default box box-primary">
            <div class="panel-body">

                @using (Html.BeginForm("HeThongAddNewSuKien", "SuKiens", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "HeThongAddNewSuKien", onsubmit = "return validate()" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(m => m.HeThongId)
                    if (ViewBag.hethongid != null)
                    {
                        <script>
                            $(window).load(function () {
                                $('#HeThongId').val('@ViewBag.hethongid');
                            });
                        </script>
                    }


                    <div class="form-group">
                        @Html.LabelFor(m => m.TDSuKien, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.TDSuKien, new { @class = "form-control", placeholder = "Tên sự kiện" })
                            @Html.ValidationMessageFor(m => m.TDSuKien, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.DsAnh, new { @class = "col-md-2 control-label" })
                        @Html.TextBoxFor(m => m.DsAnh, new { @class = "form-control" })<a class="btn btn-primary" href="#" id="uprefresh">Up lại ảnh</a>

                        
                        <div id="dzupanhsukien" class="dropzone">
                            <div class="dz-default dz-message" data-dz-message>
                                <span>Chọn ảnh sự kiện</span>
                            </div>
                        </div>
                       

                    </div>



                    <div class="form-group">
                        @Html.LabelFor(model => model.NDSuKien, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.NDSuKien, htmlAttributes: new { @class = "form-control", type = "number", row = 10 })
                            @Html.ValidationMessageFor(m => m.NDSuKien, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="form-group" id="ngaythangsukien">
                        <label class="col-md-2 control-label">Ngày sự kiện: </label>
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.NgayBD, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(m => m.NgayBD)
                            @Html.ValidationMessageFor(m => m.NgayBD, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-5">
                            @Html.LabelFor(model => model.NgayKT, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(m => m.NgayKT)
                            @Html.ValidationMessageFor(m => m.NgayKT, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <label>
                                @Html.CheckBoxFor(model => model.ConfirmSend) Xác nhận gửi thông báo
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" class="btn btn-primary" value="Thêm sự kiện" />
                        </div>
                    </div>
                }


                

            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/dropzonescripts")
    
    <script>
                

        $(function () {
            CKEDITOR.replace('NDSuKien',
            {
                uiColor: '#337ab7',
                height: '200px',
            });
        });

        function validate() {
            var _fd = $('#NgayBD').val();
            var _td = $('#NgayKT').val();
            if (_fd !== "" && _td !== "") {
                var valid = compareDate(_fd, _td);
                if (!valid) {
                    alert('Ngày bắt đầu phải nhỏ hơn ngày kết thúc.');
                    $('#NgayKT').focus();
                    return false;
                }

            }
        }

        $(function () {
            $.validator.addMethod('date',
            function (value, element) {
                if (this.optional(element)) {
                    return true;
                }
                var ok = true;
                try {
                    $.datepicker.parseDate('yy-mm-dd', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
            $(".datefield").datepicker({ dateFormat: 'yy-mm-dd', changeYear: true });
        });

        
        $(document).ready(function () {
            $('#uprefresh').click(function (e) {
                e.preventDefault();
                window.location.href = document.location.search;
            })

            Dropzone.autoDiscover = false;
            var hinhanhne = [];
            var myUpAnh = new Dropzone("div#dzupanhsukien", {
                url: "/Home/upnhieuanh",
                addRemoveLinks: true,
                maxFiles: 50,
                maxFilesize: 1,
                uploadMultiple: true,
                acceptedFiles: "image/*",
                dictFallbackMessage: "Trình duyệt của bạn không hỗ trợ kéo thả tệp để tải lên.",
                dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
                dictFileTooBig: "Tệp có dung lượng quá lớn ({{filesize}}MiB). Dung lượng cho phép: {{maxFilesize}}MiB.",
                dictInvalidFileType: "Tệp bạn chọn không được phép tải lên.",
                dictResponseError: "Server responded with {{statusCode}} code.",
                dictCancelUpload: "Hủy tải lên",
                dictCancelUploadConfirmation: "Bạn chắc chắn muốn hủy tải lên?",
                dictRemoveFile: "Loại bỏ tệp tin",
                dictMaxFilesExceeded: "Bạn không thể tải lên quá 50 hình.",
                success: function (file, response) {
                    var imgPath = response.Message;
                    if (imgPath !== "") {
                        //console.log(imgPath);                        
                        hinhanhne.push(imgPath);
                        console.log(hinhanhne);
                        $("#DsAnh").val(hinhanhne);
                        file.previewElement.classList.add("dz-success");
                    }
                    
                },
                init: function () {
                    this.on("thumbnail", function (file) {
                        var w = file.width;
                        var h = file.height;
                        if (file.accepted !== false) {
                            // Do the dimension checks you want to do
                            if (Math.round((w / 17) * 9) < h && h < Math.round((w / 15) * 9)) {
                                file.acceptDimensions();
                            }
                            else {
                                file.rejectDimensions();
                            }
                        }
                    })                    

                },                
                accept: function (file, done) {
                    file.rejectDimensions = function () {
                        done("vui lòng ảnh có kích thước 16:9");
                    };
                    file.acceptDimensions = done;
                },
                error: function (file, response) {
                    //file.previewElement.classList.add("dz-error");
                    //$(file.previewElement).find('.dz-error-message').text(response);
                    alert(response);
                    this.removeFile(file);
                },
                HiddenFilesPath: 'body',
                removedFile: function (file) {
                    var _ref;
                    return (_ref = file.previewElement) != null ? ref.parentNode.removeChild(file.previewElement) : void 0;
                    hinhanhne = [];
                    $("#DsAnh").val(hinhanhne);
                }
            });

            //myUpAnh.on('removedfile', function (file) {
            //    for (var i = 0; i < hinhanhne.length; ++i) {
            //        if (hinhanhne[i] == file.name) {
            //            removeA(hinhanhne, file.name);
            //            console.log(hinhanhne);
            //            $("#DsAnh").val(hinhanhne);
            //        }
            //    }
            //})
            
        });



        function removeA(arr) {
            var what, a = arguments, L = a.length, ax;
            while (L > 1 && arr.length) {
                what = a[--L];
                while ((ax = arr.indexOf(what)) !== -1) {
                    arr.splice(ax, 1);
                }
            }
            return arr;
        }
        //var ary = ['three', 'seven', 'eleven'];
        //removeA(ary, 'seven');

    </script>
}